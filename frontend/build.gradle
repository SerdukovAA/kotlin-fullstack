plugins {
    id 'kotlin2js' version '1.3.21'
}


sourceCompatibility = 1.8

dependencies {
    compile project(':render')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-js"
    testImplementation "org.jetbrains.kotlin:kotlin-test-js"
}

compileKotlin2Js {
    kotlinOptions.outputFile = "${projectDir}/src/main/resources/script/output.js"
    kotlinOptions.moduleKind = 'plain'
    kotlinOptions.metaInfo = false
    kotlinOptions.sourceMap = false
    kotlinOptions.main = "call"
}

task assembleWeb(type: Sync) {
    configurations.compile.each { File file ->
        from(zipTree(file.absolutePath), {
            includeEmptyDirs = false
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") ||
                        !path.startsWith("META-INF/"))
            }
        })
    }
    from compileKotlin2Js.destinationDir
    into "${projectDir}/src/main/resources/lib"

    dependsOn classes
}
assemble.dependsOn assembleWeb


task cleanOldBuild (type:Exec) {
    executable = 'rm'
    args = ['-Rf', "${projectDir}/src/main/resources", "../backend/src/main/resources/static"]
}
build.dependsOn cleanOldBuild
build.mustRunAfter cleanOldBuild

task buildJs() {

    doLast {
        //create resources folder, was deleted on cleanOldBuild
        mkdir "${projectDir}/src/main/resources"

        //join libs
        (new File("${projectDir}/src/main/resources/lib.js")).text = fileTree("${projectDir}/src/main/resources/lib").sort()
                .collect {
            it.getText()
        }.join("\n")

        //join src
        (new File("${projectDir}/src/main/resources/script.js")).text = fileTree("${projectDir}/src/main/resources/script").collect {
            it.getText()
        }.join("\n")
    }
    dependsOn build
    mustRunAfter build
}
buildJs.dependsOn build
buildJs.mustRunAfter build

task cleanNewBuild (type:Exec) {
    executable = 'rm'
    args = ['-Rf', "${projectDir}/src/main/resources/lib", "${projectDir}/src/main/resources/script",]
    shouldRunAfter buildJs
}
cleanNewBuild.mustRunAfter buildJs


task dist() {
    doLast {
        copy {
            from "${projectDir}/src/main/resources/script.js"
            into "../backend/src/main/resources/static"
        }
        copy {
            from "${projectDir}/src/main/resources/lib.js"
            into "../backend/src/main/resources/static"
        }
    }
}

dist.dependsOn buildJs
dist.dependsOn cleanNewBuild
dist.shouldRunAfter buildJs